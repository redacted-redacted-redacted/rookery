// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum EventVariant {
    TOURNAMENT
    CASUAL
    LESSON
    SCRIMMAGE
    MEETING
    OTHER
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
    id          String       @id @default(cuid())
    name        String
    description String
    start_time  DateTime
    end_time    DateTime
    location    String
    variant     EventVariant
    User        User?        @relation(fields: [userId], references: [id])
    userId      String?
}

model User {
    id                String    @id @default(cuid())
    name              String?
    email             String?   @unique
    image             String?
    emailVerified     DateTime?
    accounts          Account[]
    sessions          Session[]
    display_name      String?
    discord_id        String?
    display_image     String?
    discord_name      String?
    uscf_username     String?
    uscf_rating       Int?
    chesscom_username String?
    chesscom_rating   Int?
    lichess_username  String?
    lichess_rating    Int?
    affiliated_school String?
    phone_number      String?
    events            Event[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
